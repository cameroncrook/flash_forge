Antivirus;designed to detect, prevent, and remove malicious software (malware) from computers and networks. It scans files and compares them against a database of known malware signatures. Purpose: Protects against viruses, worms, and other types of malware.
Anti-malware;software, like antivirus, is designed to detect, prevent, and remove various types of malicious software, including viruses, trojans, and spyware. Purpose: Offers broader protection against a wide range of malware threats beyond traditional viruses.
Endpoint detection and response (EDR);continuously monitor endpoints (computers, servers, mobile devices) for suspicious activities and respond to security incidents in real-time. Purpose: Provides advanced threat detection, investigation, and response capabilities to protect against sophisticated attacks.
DLP;prevent unauthorized access, use, or transmission of sensitive data. They monitor and control data in motion, at rest, and in use. Purpose: Ensures sensitive data does not leave the organization without proper authorization, preventing data breaches and leaks.
Next-generation firewall (NGFW);combines traditional firewall features with advanced capabilities, such as intrusion detection and prevention, application awareness, and deep packet inspection. Purpose: Offers enhanced security by allowing administrators to create granular rules based on applications, users, and content.
Host-based intrusion prevention system (HIPS);monitors and analyzes network traffic and system activities on individual hosts (computers) to identify and prevent intrusion attempts. Purpose: Provides an additional layer of security by detecting and blocking malicious activities at the host level.
Host-based intrusion detection system (HIDS);Similar to HIPS, HIDS monitors and analyzes host system events and activities. It doesn't prevent intrusions but detects and alerts administrators about suspicious activities. Purpose: Alerts administrators about potential security incidents on individual hosts, allowing timely response and investigation.
Host-based firewall;a software-based firewall that resides on individual computers or devices. It monitors and controls incoming and outgoing network traffic based on an applied rule set. Purpose: Adds an additional layer of security by filtering network traffic on the host level, protecting the system from unauthorized access and malware attacks.
Boot security/Unified Extensible Firmware Interface (UEFI);a modern firmware interface that has largely replaced the traditional BIOS (Basic Input/Output System) in newer computers. UEFI provides a standardized way for the operating system to interact with the computer's firmware at boot time. UEFI firmware can include security features to ensure the integrity and authenticity of the boot process. Secure Boot is one such feature, which checks the digital signature of boot loaders, ensuring they have not been tampered with or replaced by malicious software. Secure Boot prevents the loading of unauthorized or unsigned operating systems and boot loaders during the startup process.
Measured boot;a security feature that ensures the integrity of the boot process by measuring various components and storing these measurements in a trusted platform module (TPM) or similar secure storage. During boot, critical components like the firmware, bootloader, and kernel are measured. These measurements are then stored securely. If the system's configuration or boot files have been tampered with, the measurements will not match the expected values, indicating a potential security breach.
Boot attestation;a process used to verify the integrity and security of the boot environment. It involves generating a cryptographic attestation that provides proof of the system's boot state and integrity measurements. is commonly used in remote attestation scenarios, where a system needs to prove its integrity to a remote entity. For example, in cloud computing environments, virtual machines can use boot attestation to prove to the cloud provider that they are running in a secure, unaltered state.
Tokenization;the process of replacing sensitive data with a unique identifier called a token. The sensitive data, such as credit card numbers or social security numbers, is stored in a secure database, and only the token (a reference to the original data) is used within the system. Purpose: Tokenization helps protect sensitive data by ensuring that the actual sensitive information is never stored within the database. Even if the tokenized data is intercepted, it is meaningless without access to the secure tokenization system. Use Cases: Tokenization is commonly used in payment processing systems, where credit card information needs to be stored securely. Instead of storing credit card numbers, systems store tokens representing those numbers.
Salting;the practice of adding a random piece of data (the salt) to the data being hashed before the hashing process. The salt is then combined with the data and hashed together. Purpose: Salting is used to ensure that identical pieces of data do not result in the same hash value. It adds randomness to the hashing process, making it significantly more difficult for attackers to use precomputed tables (rainbow tables) to reverse-engineer the original data from the hash. Use Cases: Salting is primarily used in password storage. When users create an account and set a password, the system generates a random salt, combines it with the password, hashes the result, and stores both the hash and the salt. During authentication, the stored salt is added to the entered password, hashed, and compared to the stored hash.
Hashing;a process of converting input data (such as passwords or files) into a fixed-length string of characters, which is typically a digest or checksum. Purpose: Hashing is used for data integrity verification, password storage, and digital signatures. In the context of password storage, hashing ensures that passwords are not stored in plaintext. Even a small change in the input data results in a substantially different hash, making it computationally infeasible to reverse-engineer the original data from the hash. Use Cases: Hashing is widely used in various applications, including password storage, digital certificates, and data integrity checks. In databases, hashes can be used to verify the integrity of stored data.
Input validations;the process of ensuring that data provided by users or other systems is clean, correct, and useful before it's processed or stored by the application. Purpose: Proper input validation prevents various attacks, such as SQL injection and cross-site scripting (XSS), by ensuring that input data conforms to expected formats and ranges.
Secure cookies;refer to HTTP cookies that have secure flags set, meaning they are only transmitted over secure (HTTPS) connections and not over unencrypted HTTP connections. Purpose: Secure cookies help protect sensitive information by ensuring that they are transmitted securely between the client's browser and the web server, reducing the risk of interception by attackers.
Hypertext Transfer Protocol (HTTP) headers;additional pieces of information sent by the server with the requested web page. Security-related headers (e.g., Content Security Policy, Strict-Transport-Security) provide instructions to the browser on how to handle the web page. Purpose: Security-related HTTP headers enhance the security of web applications by mitigating various attacks, such as clickjacking and XSS attacks, and by enforcing secure communication practices.
Code signing;the process of digitally signing software or scripts to confirm the identity of the software publisher and to ensure that the code has not been tampered with or altered by a third party. Purpose: Code signing helps users and systems trust the integrity and authenticity of downloaded or installed software, reducing the risk of running malicious or tampered code.
Allow list;a list of approved entities, such as IP addresses, applications, or users, that are explicitly permitted to access specific resources or perform certain actions. Purpose: Allow lists ensure that only trusted entities can access sensitive resources, reducing the attack surface and mitigating potential security threats.
Block list/deny list;a list of prohibited entities, such as IP addresses or websites, that are explicitly blocked from accessing specific resources or services. Purpose: Block lists prevent known malicious entities from accessing resources, providing an additional layer of security by blocking potentially harmful traffic or content.
Secure coding practices;involve using development techniques and writing code in a way that prioritizes security, reducing vulnerabilities and potential points of exploitation. Purpose: Secure coding practices help developers create robust and secure applications by avoiding common vulnerabilities, such as buffer overflows, and following best practices for input validation and data handling.
Static code analysis;a method of analyzing source code before it is compiled or executed, looking for security vulnerabilities, coding style issues, and other potential problems. Purpose: Static code analysis helps identify security flaws and coding errors early in the development process, allowing developers to fix issues before the application is deployed, reducing the risk of exploitation.
Manual code review;involves human reviewers inspecting source code to find security vulnerabilities, logic errors, and other issues that automated tools might miss. Purpose: Manual code review provides a deeper analysis of the code, allowing experienced developers to identify subtle vulnerabilities and ensure that the code follows secure coding practices.
Dynamic code analysis;also known as dynamic application security testing (DAST), involves testing an application in its running state to find security vulnerabilities while the application is being used. Purpose: Dynamic code analysis simulates real-world attack scenarios, helping identify vulnerabilities that may only manifest under specific conditions, providing insights into the application's security posture during runtime.
Fuzzing;a software testing technique that involves providing invalid, unexpected, or random data as inputs to a computer program to discover vulnerabilities or errors. Purpose: Fuzzing helps identify weaknesses in software by subjecting it to unexpected inputs, potentially revealing security vulnerabilities like buffer overflows or crashes triggered by specific inputs.
Open ports and services;network ports and software services running on a system that are accessible over a network. Open ports can be potential entry points for attackers if not properly secured. Purpose: Hardening open ports and services involves configuring firewalls and security settings to minimize the number of open ports, limiting exposure to potential attacks and reducing the attack surface of the system.
Registry;a hierarchical database that stores configuration settings and options on Microsoft Windows operating systems. Purpose: Registry hardening involves securing and restricting access to critical registry entries. Unauthorized changes to the registry can impact system stability and security, so controlling access is crucial for system hardening.
Disk encryption;the process of converting data on a hard drive into unreadable text (ciphertext) that can only be decrypted and read with the correct decryption key. Purpose: Disk encryption protects data at rest, ensuring that even if the physical storage device is stolen, the data remains inaccessible without the proper decryption key, enhancing overall system security.
OS;configuring the operating system securely by disabling unnecessary services, implementing strong authentication methods, and applying security policies. Purpose: OS hardening strengthens the system's defenses against various attacks, reducing vulnerabilities and the potential for exploitation.
Patch management;the process of identifying, acquiring, installing, and verifying patches (code changes) for software applications and operating systems to address security vulnerabilities and other issues. Purpose: Patch management is crucial for keeping systems up to date with the latest security fixes. Regularly applying patches helps prevent exploitation of known vulnerabilities.
Third-party updates;refer to patches and updates provided by software vendors other than the operating system vendor. Purpose: Many security vulnerabilities arise from third-party applications. Ensuring that these applications are also kept up to date is essential for comprehensive security, as attackers often target widely used third-party software.
Auto-update;a feature in software that automatically downloads and installs updates without user intervention. Purpose: Auto-update ensures that systems receive critical security patches promptly. Keeping software updated automatically reduces the risk of unpatched vulnerabilities being exploited by attackers.
Self-encrypting drive (SED)/ full-disk encryption (FDE);A Self-Encrypting Drive (SED) is a hard drive or solid-state drive (SSD) equipped with hardware-based encryption capabilities. Full-Disk Encryption (FDE) is a process of encrypting all data on a storage device, ensuring that the entire contents of the disk are protected. Purpose: The purpose of SED and FDE is to enhance data security by automatically encrypting all data stored on the drive. This encryption is transparent to the user and provides protection against data breaches, especially if the device is lost or stolen.
Opal;Opal is a specification for self-encrypting drives (SEDs) developed by the Trusted Computing Group (TCG). Opal-compliant drives adhere to specific standards for encryption, key management, and authentication protocols. Purpose: Opal-compliant drives ensure interoperability and compatibility among different hardware and software vendors. They provide a standardized approach to implementing self-encryption, making it easier for organizations to deploy secure storage solutions.
Hardware root of trust;Hardware Root of Trust refers to a trusted component or process built into a computer system's hardware that establishes a secure foundation for the system. It ensures the integrity of critical system components from the moment the system starts up. Purpose: The Hardware Root of Trust provides a secure starting point for the system's boot process, ensuring that the firmware, operating system, and other essential components have not been tampered with. It forms the basis for establishing trust in the system's overall security.
Trusted Platform Module (TPM);Trusted Platform Module (TPM) is a hardware-based security chip embedded on the motherboard of a computer or other devices. TPM provides various security-related functions, including secure storage of cryptographic keys and hardware-based encryption. Purpose: TPM enhances the security of the system by providing a secure storage area for sensitive information, such as encryption keys and digital certificates. It also supports functions like secure boot and helps in attestation, ensuring that the system's configuration is known and trustworthy.
Sandboxing;Sandboxing is a security technique that isolates applications or processes from the rest of the system, restricting their access to system resources and sensitive data. Sandboxes create a controlled environment where applications can run safely. Purpose: Sandboxing helps prevent malicious software from affecting the rest of the system. By confining potentially harmful applications within a controlled environment, even if they are compromised, they cannot access critical system files or sensitive data. Sandboxing is commonly used in web browsers and email clients to contain potentially dangerous content from the internet.
