Cloud models;The cloud computing is the delivery of computing services including servers and storage and databases, applications, networking, software, analytic, intelligence, you name it, over the internet, AKA the cloud that very importantly scale to business needs.
Infrastructure as a service (IaaS);Sometimes referred to as "bare metal" computing resources, because that's what we're asking for as a customer, we're provisioning in a way that scales to what we need, processing, storage, networks and other fundamental computing resources. The customer that's us will have control over the operating system, storage and the deployed applications, and maybe a limited set of networking components. So when we're evaluating the provider, what are we gonna focus on? Availability, maintenance and vulnerability management.
Platform as a service (PaaS);In this case, what's provided to us as the customer is the computing resources plus an operating system, and maybe a database and the customer that's us, we're gonna deploy into the cloud infrastructure, applications that we've either created or acquired. Now we're gonna have control over the deployed application and possibly some configuration settings for the application hosting environment. When we're evaluating the provider, what are we thinking about? Availability, maintenance, vulnerability management, confidentiality, privacy, and data ownership.
Software as a service (SaaS);this is a service model that all of us are most familiar with. This is when we interact with a service provider, who's providing an application to us in the cloud. So what are they providing? Computing resources, an operating system and an application. So when we're evaluating the cloud service provider, what should we be considering? Well, availability, maintenance, vulnerability management, confidentiality and privacy, data ownership, multitenancy and testing.
Anything as a service (XaaS);represents a growing type of services available over the internet via cloud computing, as opposed to being provided locally or on prem. Now, examples include, Desktop-as-a-Service, Disaster Recovery-as-a-Service, Network-as-a-Service, Communications-as-a-Service, Database-as-a-Service. And I suspect that this list is gonna grow and grow and grow, eventually anything you want will be available to you in the cloud.
Public;it is provision for public use. So what do we need to consider? Well, one is location, where is it? Where's our data being stored? Where is our data being processed? And through what countries is our data being transmitted? And then multitenancy because we're sharing that space with other people. We wanna make sure that there are good strict boundaries, good security controls between our data and others data.
Community;is provisioned for the exclusive use of a well-defined group. So we're gonna know where it is but we still need to think about multitenancy.
Private;is provisioned for the exclusive use of a single organization, we'll know where it is, and we don't have to share it with anyone but we do wanna make sure that it is scalable and meets our business needs.
Hybrid;when we have the public and private cloud infrastructures communicate over an encrypted connection using technology that allows the portability of data and applications. So in addition to what we would be concerned with on the public and private cloud side, we also now have to be concerned with the security of the connection.
On-premises vs. off-premises;Cloud computing machines are located on premise vs off premise
Fog computing;Distributed form of cloud computing. Using someone elseâ€™s computers. Cloud Computing with more computers.
Edge computing;Computing performed at the edge of a network. Processing the data closer to the source of data generation (the user) reduces latency and enables real-time processing for devices far away from the center of the network.
Thin client;Lightweight computer or terminal that relies on a central server to perform most it its processing and computing. Easy to manage and cheap, but dependent on network connection.
Containers;the products of operating system virtualization, no hypervisor necessary. Containers provide lightweight virtual environments, known as instances. Operating System containers are virtual environments that share the kernel of the host operating system but provide user space isolation. Application containers are virtual environments that share the kernel of the host operating system, designed to package and run a single service.
Microservices/API;A software architecture approach that breaks down applications into small, independently
Infrastructure as code;Infrastructure provision and management tasks are automated through code.
Software-defined networking (SDN);an innovative approach to network management that separates the control plane (which determines how traffic is routed) from the data plane (which forwards the traffic to its destination). By decoupling these functions and centralizing control, SDN enables more efficient network configuration, management, and optimization. It allows network administrators to dynamically adjust network resources using software applications and open protocols, enhancing flexibility and scalability.
Software-defined visibility (SDV);the capability of a network infrastructure to provide real-time, granular insights into network traffic and application behavior. SDV solutions utilize software-based tools and technologies to capture, analyze, and visualize network data. By offering deep visibility into network activities, SDV helps organizations monitor their network performance, detect anomalies, optimize resource allocation, and enhance overall security by identifying potential threats and vulnerabilities in real time.
Serverless architecture;a cloud computing model where the cloud provider automatically manages the infrastructure, allowing developers to focus solely on writing code. In serverless computing, applications run in stateless compute containers that are triggered by events, and the cloud provider automatically allocates resources as needed.
Services integration;the process of combining different software services and systems to work together seamlessly. It involves connecting and coordinating various services to enhance functionality, improve efficiency, and enable data flow between different applications and components.
Resource policies;a set of rules and permissions that dictate how resources in a computing environment (such as databases, storage, or networks) can be accessed and interacted with. These policies define who can access the resources and what actions they are allowed to perform.
Transit gateway;a network transit hub that enables seamless connectivity between multiple virtual private clouds (VPCs) and on-premises networks. It simplifies network architecture, allowing organizations to connect their networks more easily and efficiently by acting as a central hub for routing traffic between different network environments.
Virtualization;technology that creates multiple environments from a single physical hardware system. So we've got a single system and from there we can create multiple environments.
Virtual machine (VM) sprawl avoidance;occurs when number of virtual machines is out of control. As some of you are laughing going, yep, I've seen that happen. And so when we stand up too many virtual machines, for every application or for everybody who wants anything, we end up with potentially unmanaged, unnecessary and out of compliance with licensing agreements. So there is a tendency you wanna just keep standing up virtual machines. Remember you have to treat each of those VMs as they were physical machine. So you gonna treat them the same as a physical computer, which means you have to subject them to asset management, capacity, and configuration management as well as vulnerability management.
VM escape protection;occurs when a virtual machine and the host operating system interact. And this should never ever, ever, ever happen. Over time, however, multiple exploitable vulnerabilities have been identified that allow that to happen. So it's really, really essential that your VM hosts are included in organizational vulnerability and patch management programs. Now obviously, you're gonna include your VMs, your virtual machines, but you wanna make sure that the physical host, that those VMs are running on, are included in vulnerability and in patch management programs.
